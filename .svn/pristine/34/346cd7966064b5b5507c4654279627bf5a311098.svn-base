package objects;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import toolObjects.Coordinate;
import toolObjects.Node;

/**
 * An abstract class the constructs an Enemy object that follows the player.
 * 
 * @author lamd. Created Feb 9, 2015.
 */
public abstract class Enemy {
	private final int STARTING_X = 18; // The enemy's starting X position.
	private final int STARTING_Y = 18; // The enemy's starting Y position.
	protected final int SCALE = 32; // The enemy's pixel scale.

	protected int tilePositionX; // The enemy's current tile position in the X
									// direction.
	protected int tilePositionY; // The enemy's current tile position in the Y
									// direction.
	private int playerPositionX; // The player's current tile position in the X
									// direction.
	private int playerPositionY; // The player's current tile position in the Y
									// direction.

	protected BufferedImage sprite; // The enemy's image.
	protected Level level; // The level the enemy is on.
	private Digger player; // The target player to follow.
	protected int[][] map; // The map data from the enemy level.
	protected Node[][] nodeMap; // A node version of the map.

	protected ArrayList<Node> open; // The arraylist of Nodes to check.
	protected ArrayList<Node> close; // The arraylist of Nodes already checked.
	protected ArrayList<Coordinate> path; // A coordinate arraylist of the path
											// to
											// go.
	private int oldPlayerPositionX; // The player's oldPosition in the X
									// direction.
	private int oldPlayerPositionY; // The player's oldPosition in the Y
									// direction.
	private boolean pauseStatus; // The pause status of the enemy.
	protected Rectangle2D.Double collisionBox; // The collision box of the enemy.
												// Mainly used to check if the
												// player is hit.
	private int delayCounter;
	private int waitTime;

	/**
	 * Constructs an Enemy with a specified level and target player.
	 * 
	 * @param level
	 *            the specified level.
	 * @param player
	 *            the target player.
	 */
	public Enemy(Level level, Digger player) {
		try {
			this.sprite = ImageIO.read(new File("res/nobbin.png"));
		} catch (IOException e) {
			System.out.println("Error: File not found.");
			e.printStackTrace();
			System.exit(0);
		}

		// Set initial pauseStatus.
		this.pauseStatus = false;

		// Obtains the player, the tracking object.
		this.player = player;
		this.level = level;
		if (this.level != null) {
			this.map = this.level.getMap();
		}

		// List of Nodes that needs to be checked or has been checked.
		this.open = new ArrayList<Node>();
		this.close = new ArrayList<Node>();

		// Initial conditions of the enemy.
		this.tilePositionX = this.STARTING_X;
		this.tilePositionY = this.STARTING_Y;
		this.collisionBox = new Rectangle2D.Double(this.tilePositionX
				* this.SCALE, this.tilePositionY * this.SCALE, this.SCALE,
				this.SCALE);
		this.delayCounter = 0;

		// Set in another code. -1 is a temp value.
		this.map = null;
		this.playerPositionX = -1;
		this.playerPositionY = -1;
		this.oldPlayerPositionX = -1;
		this.oldPlayerPositionY = -1;

		// Creates the Path array list of coordinates to keep track of where to
		// go.
		this.path = new ArrayList<Coordinate>();
	}

	/**
	 * Draws the enemy as it moves on a specified Graphics2D object.
	 * 
	 * @param g2
	 *            the specified Graphics2D object to be drawn on.
	 */
	public void draw(Graphics2D g2) {
		// Move the player on the path.
		if (this.level == null) {
			return;
		}
		if (this.waitTime != 0) {
			this.waitTime--;
			return;
		}
		
		move();
		
		// Draw the enemy.
		g2.translate(this.tilePositionX * this.SCALE, this.tilePositionY
				* this.SCALE);

		g2.drawImage(this.sprite, 0, 0, null);

		g2.translate(-this.tilePositionX * this.SCALE, -this.tilePositionY
				* this.SCALE);
		
		// Find path.
		run();
	}

	/**
	 * Calculate the using the Manhattan Distance.
	 * 
	 */
	public void calculateHeuristic() {
		this.map = this.level.getMap(); // Gets the map data as it is modified
										// by the player.
		this.nodeMap = new Node[this.map.length][this.map[0].length]; // 0 is an
																		// arbitrary
																		// row
																		// to
																		// get
																		// column
																		// length.

		// Obtains the player's position.
		this.playerPositionX = (int) Math.round(this.player.getPositionX());
		this.playerPositionY = (int) Math.round(this.player.getPositionY());

		// Variable
		Node rcNode;

		// Loop through the map and calculate the Heuristic values and generate
		// a node for the corresponding nodeMap.
		for (int r = 0; r < this.map.length; r++) {
			for (int c = 0; c < this.map[r].length; c++) {
				Coordinate rcCoordinate = new Coordinate(r, c);
				int heuristic = Math.abs(this.tilePositionX
						- this.playerPositionX)
						+ Math.abs(this.tilePositionY - this.playerPositionY);
				rcNode = new Node(rcCoordinate, heuristic);
				this.nodeMap[r][c] = rcNode;
			}
		}
	}

	/**
	 * Calculates the cost and moveCost of each tile surrounding the specified
	 * current Node.
	 * 
	 * @param nodeCurrent
	 *            the specified current Node.
	 * 
	 */
	public void calculateCost(Node nodeCurrent) {
		// Constants.
		final int COST = 10;
		final int CLEAR = this.level.CLEAR;

		// Obtains the current cost of the current Node and its X and Y
		// coordinates.
		int currentPositionX = nodeCurrent.getCoordinate().getX();
		int currentPositionY = nodeCurrent.getCoordinate().getY();

		// Obtains the tile ID on the map.
		int mapLeft = this.map[currentPositionX - 1][currentPositionY];
		int mapRight = this.map[currentPositionX + 1][currentPositionY];
		int mapUp = this.map[currentPositionX][currentPositionY - 1];
		int mapDown = this.map[currentPositionX][currentPositionY + 1];

		// Optains the Node data on the nodeMap.
		Node nodeLeft = this.nodeMap[currentPositionX - 1][currentPositionY];
		Node nodeRight = this.nodeMap[currentPositionX + 1][currentPositionY];
		Node nodeUp = this.nodeMap[currentPositionX][currentPositionY - 1];
		Node nodeDown = this.nodeMap[currentPositionX][currentPositionY + 1];

		// Checks that the map is CLEAR and is not already on the checked Node
		// list.
		// If not, link the specified Node to the nodeCurrent and add it to the
		// open list.
		canMoveTo(nodeCurrent, mapLeft, nodeLeft);
		canMoveTo(nodeCurrent, mapRight, nodeRight);
		canMoveTo(nodeCurrent, mapUp, nodeUp);
		canMoveTo(nodeCurrent, mapDown, nodeDown);

		// Double checks if the the current Node is in the close list before
		// adding it.
		if (!this.close.contains(nodeCurrent)) {
			this.close.add(nodeCurrent);
		}
	}

	/**
	 * Checks if the given Node is moveable. If so, it adjusts the appropriate
	 * fields and adds it to the open Node array list.
	 * 
	 * @param nodeCurrent
	 *            the current Node to point back to.
	 * @param mapPosition
	 *            the position within the map 2D array.
	 * @param nodePosition
	 *            the Node to check.
	 */
	protected void canMoveTo(Node nodeCurrent, int mapPosition,
			Node nodePosition) {
		final int CLEAR = this.level.CLEAR;
		if (mapPosition == CLEAR && !this.close.contains(nodePosition)) {
			if (nodePosition.getNext() == null) {
				nodePosition.setNext(nodeCurrent);
				this.open.add(nodePosition);
			}
		}
	}

	/**
	 * Calculates the shortest path to the player using Bread-First Search path
	 * finding algorithm
	 * 
	 * @param nodeCurrent
	 *            the current node to check.
	 * 
	 */
	public void calculateShortest(Node nodeCurrent) {
		// System.out.println("calculating");

		// Calculate the maps Heuristic.
		calculateHeuristic();

		// Clear the open and closed list before running main loop.
		this.open.clear();
		this.close.clear();

		// Add the given done to the open list. Mainly done so that the main
		// loop can operate.
		this.open.add(nodeCurrent);

		while (true) {
			// Removes the starting node from the open list and set nodeCurrent
			// to the removed node.
			nodeCurrent = this.open.remove(0);

			// Calculate the cost of the adjecent tiles.
			calculateCost(nodeCurrent);

			// Remove the current Node.
			this.open.remove(nodeCurrent);

			// Logging.
			// System.out.println("Destination: " + "[" + this.playerPositionX
			// + "][" + this.playerPositionY + "]");
			// System.out.println("Current: " + nodeCurrent.toString());
			// System.out.println(this.open.toString());
			// System.out.println(this.close.toString());

			// If the current Node is the where the player is, end the main loop
			// and process movement.
			if (nodeCurrent.getCoordinate().getX() == this.playerPositionX
					&& nodeCurrent.getCoordinate().getY() == this.playerPositionY) {
				setPath(nodeCurrent);
				break;
			}

			// If the open list is empty, break the loop.
			if (this.open.isEmpty()) {
				break;
			}
		}
	}

	/**
	 * Sets the path to the player.
	 * 
	 * @param nodeCurrent
	 *            the starting node of the path.
	 * 
	 */
	public void setPath(Node nodeCurrent) {
		if (this.pauseStatus) {
			return;
		}
		Node current = nodeCurrent;

		this.path.clear();
		while (true) {
			if (current.getNext() == null) {
				break;
			}

			this.path.add(current.getCoordinate());
			current = current.getNext();
		}

		this.path.add(new Coordinate(this.tilePositionX, this.tilePositionY));
	}

	/**
	 * Moves the player to a position on the set Path.
	 * 
	 */
	public void move() {
		final int THRESHOLD = 2;
		
		if (this.path.size() == 0 || this.pauseStatus || this.delayCounter <= THRESHOLD) {
			return;
		}
		this.delayCounter = 0;
		
		int positionInPath = -1;

		for (int i = this.path.size() - 1; i >= 0; i--) {
			if (this.path.get(i).getX() == this.tilePositionX
					&& this.path.get(i).getY() == this.tilePositionY) {
				positionInPath = i;
				break;
			}
			this.path.remove(i);
		}

		if (positionInPath <= 0) {
			return;
		}

		// Last position is the closest coordinate to the player.
		Coordinate moveTo = this.path.get(positionInPath - 1);

		// Alter the enemy's tile position.
		this.tilePositionX = moveTo.getX();
		this.tilePositionY = moveTo.getY();

		// Update the collisionBox.
		this.collisionBox.setRect(this.tilePositionX * this.SCALE,
				this.tilePositionY * this.SCALE, this.SCALE, this.SCALE);
	}

	/**
	 * Sets the Enemy's level data to the specified level.
	 * 
	 * @param level
	 *            the specified level to change to.
	 */
	public void setLevel(Level level) {
		this.level = level;
		this.path.clear();
		if (this.level == null) {
			resetPosition();
			this.open.clear();
			this.close.clear();
			this.map = null;
			return;
		}
		calculateHeuristic();
	}

	/**
	 * Sets the pauseStatus to the opposite boolean value it is currently.
	 * 
	 */
	public void setPause() {
		this.pauseStatus = !this.pauseStatus;
	}

	/**
	 * Gets the pauseStatus.
	 * 
	 * @return the pauseStatus.
	 */
	public boolean getPause() {
		return this.pauseStatus;
	}

	/**
	 * Calculates path by running core calculation methods.
	 *
	 */
	public void run() {
		if (this.level == null || this.pauseStatus) {
			return;
		}

		Node nodeCurrent = this.nodeMap[this.tilePositionX][this.tilePositionY];
		calculateShortest(nodeCurrent);
	}

	/**
	 * Resets the position of the Enemy to its starting position.
	 * 
	 */
	public void resetPosition() {
		this.tilePositionX = this.STARTING_X;
		this.tilePositionY = this.STARTING_Y;
		
		this.collisionBox.setRect(this.tilePositionX * this.SCALE,
				this.tilePositionY * this.SCALE, this.SCALE, this.SCALE);
		
		this.path.clear();
			}

	/**
	 * Returns a boolean indicating if the Enemy has collided with the player.
	 * 
	 * @return boolean value indicating collision with player.
	 */
	public boolean collideWithPlayer() {
		if (this.collisionBox.intersects(this.player.getCollisionBox())) {
			return true;
		}
		return false;
	}

	/**
	 * Returns the level data of the enemy.
	 * 
	 * @return the level data.
	 */
	public Level getLevel() {
		return this.level;
	}
	
	public void delayCounter() {
		this.delayCounter++;
	}

	public Coordinate getTileCoordinate() {
		return new Coordinate(this.tilePositionX, this.tilePositionY);
	}
	
	public void die() {
		this.resetPosition();
		this.player.addScore(250);
		this.waitTime = 20;
	}
	
	public Rectangle2D.Double getCollisionBox() {
		return this.collisionBox;
	}

}
