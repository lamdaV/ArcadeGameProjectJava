package objects;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

public class Digger {
	// Constants.
	private final int STARTING_X = 3; // The starting tile position.
	private final int STARTING_Y = 3; // The starting tile position.
	private final int SCALE = 32; // The size of a tile in pixels.
	private final int EMERALD_POINT = 100; // Points gained from each emerald.
	private final double MOVE_SPEED = 1; // The move speed in pixels.
	public final int MAX_LIFE = 5; // The max amount of lives a player can
									// gain.

	// Variables
	private double tilePositionX; // Digger's tile position in the X plane.
	private double tilePositionY; // Digger's tile position in the Y plane.
	private BufferedImage sprite; // Digger's player image.
	private Level level; // The current map.
	private int score; // The player's score.
	private int life; // The player's remaining lives.
	private Rectangle2D.Double collisionBox; // The Digger's collisionBox.
	private boolean isGodModeEnabled; // GodMode on/off(true/false).
	private String direction; // Indicates the direction the player was last moving.

	/**
	 * Constructs a Digger object to represent the player.
	 * 
	 * @param level
	 *            the level the player is on.
	 */
	public Digger(Level level) {
		// location on 20 x 20 board.
		this.tilePositionX = this.STARTING_X;
		this.tilePositionY = this.STARTING_Y;

		// Initialize score and level.
		this.score = 0;
		this.level = level;

		// Sets Initial Conditions.
		this.isGodModeEnabled = false;
		this.life = 0;
		this.collisionBox = new Rectangle2D.Double(this.tilePositionX
				* this.SCALE, this.tilePositionY * this.SCALE, this.SCALE,
				this.SCALE);

		// Questionable.
		this.direction = "right";

		// Assign the player's image.
		try {
			this.sprite = ImageIO.read(new File("res/digger.png"));
		} catch (IOException e) {
			System.out.println("Error: File not found.");
			e.printStackTrace();
			System.exit(0);
		}
	}

	/**
	 * Draws the player on a given Graphics2D object.
	 * 
	 * @param g2
	 *            the the given Graphics2D object.
	 */
	public void draw(Graphics2D g2) {
		g2.translate(this.tilePositionX * this.SCALE, this.tilePositionY
				* this.SCALE);

		g2.drawImage(this.sprite, 0, 0, null);

		g2.translate(-this.tilePositionX * this.SCALE, -this.tilePositionY
				* this.SCALE);
	}

	/**
	 * Moves the player object accordingly.
	 * 
	 * @param direction
	 *            a string indicating direction.
	 */
	public void move(String direction) {
		// Constants.
		final int EMERALD = this.level.EMERALD;
		final int CLEAR = this.level.CLEAR;

		// Variables.
		int roundedPositionX;
		int roundedPositionY;
		int currentPosition;

		// Set references.
		double oldX = this.tilePositionX;
		double oldY = this.tilePositionY;
		this.direction = direction;
		int[][] map = this.level.getMap();

		// Move the player accordingly.
		if (direction.equals("left")) {
			this.tilePositionX = this.tilePositionX - this.MOVE_SPEED;
		}
		if (direction.equals("right")) {
			this.tilePositionX = this.tilePositionX + this.MOVE_SPEED;
		}
		if (direction.equals("up")) {
			this.tilePositionY = this.tilePositionY - this.MOVE_SPEED;
		}
		if (direction.equals("down")) {
			this.tilePositionY = this.tilePositionY + this.MOVE_SPEED;
		}

		// Updates the collisionBox.
		this.collisionBox.setRect(this.tilePositionX * this.SCALE,
				this.tilePositionY * this.SCALE, this.SCALE, this.SCALE);

		// Obtains an estimated position of the tilePosition.
		roundedPositionX = (int) Math.round(this.tilePositionX);
		roundedPositionY = (int) Math.round(this.tilePositionY);

		currentPosition = map[roundedPositionX][roundedPositionY];

		collideWithOthers(map);

		if (collideWithBarrier()) {
			this.tilePositionX = oldX;
			this.tilePositionY = oldY;
		}

		if (currentPosition == EMERALD) {
			this.checkScore();
			this.level.updateTile(roundedPositionX, roundedPositionY, CLEAR);
			this.score = this.score + this.EMERALD_POINT;
			System.out.println(this.score);
		}

		this.level.generateRegularCollisionBoxes();

	}

	/**
	 * Resets the player's position to its starting point. Mainly used after
	 * levels are completed.
	 * 
	 */
	public void resetPlayerPosition() {
		this.tilePositionX = this.STARTING_X;
		this.tilePositionY = this.STARTING_Y;
	}
	
	/**
	 * Returns the Digger X-Coordinate position.
	 * 
	 * @return the X-Coordinate position.
	 */
	public double getPositionX() {
		return this.tilePositionX;
	}

	/**
	 * Returns the Digger Y-Coordinate position.
	 * 
	 * @return the Y-Coordinate position.
	 */
	public double getPositionY() {
		return this.tilePositionY;
	}

	/**
	 * Updates Digger's level field. Mainly used after levels are completed.
	 * 
	 * @param level
	 *            a new level file
	 */
	public void setLevel(Level level) {
		this.level = level;
	}
	
	/**
	 * Returns the Digger's level data.
	 * 
	 * @return level data.
	 */
	public Level getLevel() {
		return this.level;
	}

	/**
	 * Returns a boolean value of whether or not the Digger is colliding with
	 * the Barriers.
	 * 
	 * @return true if colliding with barrier false if not.
	 */
	public boolean collideWithBarrier() {
		ArrayList<Rectangle2D.Double> barrierCollisonBoxes = this.level
				.getBarrierCollisonBoxes();

		for (int i = 0; i < barrierCollisonBoxes.size(); i++) {
			if (this.collisionBox.intersects(barrierCollisonBoxes.get(i))) {
				return true;
			}
		}

		return false;
	}

	/**
	 * Checks if the Digger is colliding with non-barrier blocks. If it can dig
	 * through, Digger will move through.
	 * 
	 * @param map
	 *            the level tileID map.
	 */
	public void collideWithOthers(int[][] map) {
		final int DIRT = this.level.DIRT;
		final int EMERALD = this.level.EMERALD;
		final int CLEAR = this.level.CLEAR;

		ArrayList<Rectangle2D.Double> regularCollisionBoxes = this.level
				.getRegularCollisionBoxes();

		for (int i = 0; i < regularCollisionBoxes.size(); i++) {
			if (this.collisionBox.intersects(regularCollisionBoxes.get(i))) {
				int c = (int) regularCollisionBoxes.get(i).getX() / this.SCALE;
				int r = (int) regularCollisionBoxes.get(i).getY() / this.SCALE;
				if (map[c][r] == DIRT) {
					this.level.updateTile(c, r, CLEAR);
				}
				if (map[c][r] == EMERALD) {
					this.level.updateTile(c, r, CLEAR);
					this.score = this.score + this.EMERALD_POINT;
					System.out.println(this.score);
				}
			}
		}
	}

	/**
	 * Returns the Digger's collisionBox.
	 * 
	 * @return the collisionBox.
	 */
	public Rectangle2D.Double getCollisionBox() {
		return this.collisionBox;
	}

	/**
	 * Kills the Digger and resets its position.
	 * 
	 */
	public void die() {
		if (isGodModeEnabled) {
			return;
		}
		this.life--;
		resetPlayerPosition();
		this.collisionBox.setRect(this.tilePositionX, this.tilePositionY,
				this.SCALE, this.SCALE);
	}

	/**
	 * Returns the life count of the Digger.
	 * 
	 * @return the life count.
	 */
	public int getLife() {
		return this.life;
	}
	
	/**
	 * Sets the Diggers life count to the specified paramenter.
	 * 
	 * @param life
	 *            the specified life parameter.
	 */
	public void setLife(int life) {
		this.life = life;
	}

	/**
	 * Checks for bonuses to add for the Digger if prerequisites are met.
	 * 
	 */
	public void checkScore() {
		if (this.score != 0 && this.score % 5000 == 0
				&& this.life < this.MAX_LIFE) {
			this.life++;
		}
	}

	/**
	 * Returns the score of the Digger.
	 * 
	 * @return the score.
	 */
	public int getScore() {
		return this.score;
	}

	/**
	 * Toggles GodMode. (Makes the player unkillable).
	 * 
	 */
	public void toggleGodMode() {
		this.isGodModeEnabled = !this.isGodModeEnabled;
		if (this.isGodModeEnabled) {
			System.out.println("GodMode Enabled.");
		} else {
			System.out.println("GodMode Disabled.");
		}
	}

	/**
	 * Returns the direction the Digger was moving.
	 * 
	 * @return String of the direction.
	 */
	public String getDirection() {
		return this.direction;
	}

	public void shoot() {
		// Bullet shoot = new Bullet(this);
	}
}
