import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;

import javafx.scene.paint.Color;

import javax.swing.JComponent;

public class Level extends JComponent {
	// Texture/Block id implement more later
	private final int DIRT = 0;
	private final int BARRIER = 1;
	private final int CLEAR = 2;

	// Constants
	private final int WIDTH = 20;
	private final int HEIGHT = 20;
	private final int TILE_SIZE = 25;

	private int[][] level = new int[this.WIDTH][this.HEIGHT];
	private int counter = 0;

	/**
	 * TODO Put here a description of what this method does.
	 * 
	 */
	public void populateLevel() {
		File level = null;

		if (this.counter == 0) {
			level = new File("res/Level 1.txt");
		} else if (this.counter == 1) {
			level = new File("res/Level 2.txt");
		} else {
			level = new File("res/Level 3.txt");
		}

		Scanner input = null;

		try {
			input = new Scanner(level);

			for (int r = 0; r < this.WIDTH; r++) {
				for (int c = 0; c < this.HEIGHT; c++) {
					if (!input.hasNextInt()) {
						break;
					}
					this.level[r][c] = input.nextInt();
				}
			}
		} catch (FileNotFoundException e) {
			System.out.println("File " + level.getAbsolutePath()
					+ " could not be found.");
		} catch (IOException ioe) {
			ioe.printStackTrace();
		} finally {
			input.close();
			this.counter++;
		}
		// System.out.println(Arrays.deepToString(this.level));
	}

	@Override
	protected void paintComponent(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;

		for (int r = 0; r < this.level.length; r++) {
			for (int c = 0; c < this.level[r].length; c++) {
				if (this.level[r][c] == this.DIRT) {
					g2.setColor(Color.BROWN);
				} else if (this.level[r][c] == this.BARRIER) {
					g2.setColor(Color.BLUEVIOLET);
				} else if (this.level[r][c] == this.CLEAR) {
					g2.setColor(Color.BLACK);
				}
				g2.fillRect(r * this.TILE_SIZE, c * this.TILE_SIZE,
						this.TILE_SIZE, this.TILE_SIZE);
				g2.drawRect(r * this.TILE_SIZE, c * this.TILE_SIZE,
						this.TILE_SIZE, this.TILE_SIZE);
			}

		}
	}
}
