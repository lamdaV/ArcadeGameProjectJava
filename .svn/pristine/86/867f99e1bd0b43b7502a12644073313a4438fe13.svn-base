package objects;



import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;

import state.StateManager;

public class Gold {
	// Tile ID
	private final int DIRT = 0;
	private final int BARRIER = 1;
	private final int CLEAR = 2;
	private final int EMERALD = 3;
	private final int GOLD = 4;
	private final int TREASURE = 20;
	
	// Constants.
	private final int SCALE = 32; // The size of a tile in pixels.
	private final double MOVE_SPEED = 0.15; // The move speed in pixels.
	
	// Variables
	private int tilePositionX; // Gold tile position in the X plane.
	private int tilePositionY; // Gold tile position in the Y plane.
	private BufferedImage sprite; // Gold player image.
	private Level level; // the current map.
	private StateManager manager; //The manager.
	
	public Gold(StateManager man) {
		try {
			this.sprite = ImageIO.read(new File("res/chest.png"));
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error: File not found");
		}
		this.level = null;
		this.manager = man;
	}
	
	public void draw(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		int[][] map = this.level.getMap();
		for(int r = 0; r < map.length; r++) {
			for(int c = 0; c < map[r].length; c++) {
				int currentPosition = map[r][c];
				if(currentPosition == 4) {
					this.tilePositionX = r;
					this.tilePositionY = c;
					g2.translate(this.tilePositionX * this.SCALE, this.tilePositionY * this.SCALE);
					g2.drawImage(this.sprite, 0, 0, null);
					
					g2.translate(-this.tilePositionX * this.SCALE, -this.tilePositionY * this.SCALE);
				}
			}
		}
	}
	
	public void move(String direction, int x, int y) {
		if (direction.equals("left")) {	
			if(this.level.getType(x-1, y) == this.GOLD) {
				this.level.updateTile(x-2, y, this.GOLD);
				this.level.updateTile(x-1, y, this.GOLD);
				this.level.updateTile(x, y, this.CLEAR);
				if(this.level.getType(x - 1, y + 1) == this.CLEAR) {
					fall(x-1,y);
				}
			} else {
				this.level.updateTile(x-1, y, this.GOLD);
				this.level.updateTile(x, y, this.CLEAR);
				if(this.level.getType(x - 1, y + 1) == this.CLEAR) {
					fall(x-1,y);
				}
			}
		} if (direction.equals("right")) {	
			if(this.level.getType(x + 1, y) == this.BARRIER) {
				return;
			} else if(this.level.getType(x+1, y) == this.GOLD) {
				this.level.updateTile(x+2, y, this.GOLD);
				this.level.updateTile(x+1, y, this.GOLD);
				this.level.updateTile(x, y, this.CLEAR);
				if(this.level.getType(x + 1, y + 1) == this.CLEAR) {
					fall(x+1,y);
				}
			} else {
				this.level.updateTile(x+1, y, this.GOLD);
				this.level.updateTile(x, y, this.CLEAR);
				if(this.level.getType(x + 1, y + 1) == this.CLEAR) {
					fall(x+1,y);
				}
			}
		} 
	}
	
	public void fall(int x, int y) {
		ArrayList<Enemy> enemies = this.manager.getEnemies();
		try {
//			Graphics g = getGraphics();
//			Graphics2D g2 = (Graphics2D) g;
			TimeUnit.MILLISECONDS.sleep(500);
			int counter = 0;
			while(true) {
				TimeUnit.MILLISECONDS.sleep(100);
				if(this.manager.getPlayer().getPositionX() == x && this.manager.getPlayer().getPositionY() == y) {
					this.manager.getPlayer().die();
				}
				for(Enemy enemy: enemies) {
					if(enemy.getTileCoordinate().getX() == x && enemy.getTileCoordinate().getY() == y) {
						enemy.die();
					}
				}
				if(this.level.getType(x, y+1) == this.DIRT || this.level.getType(x, y + 1) == this.BARRIER) {
					if(counter > 1) {
						this.level.updateTile(x, y, this.TREASURE);
					}
					break;
				}
				this.level.updateTile(x, y+1, this.GOLD);
				this.level.updateTile(x, y, this.CLEAR);
				y = y + 1;
				counter++;
			}
		} catch(InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public int check(int x, int y) {
		if(this.level.getType(x, y) == this.BARRIER) {
			return this.BARRIER;
		} if(this.level.getType(x, y) == this.BARRIER) {
			return this.BARRIER;
		} if(this.level.getType(x, y + 1) == this.CLEAR) {
			return this.CLEAR;
		}
		// To satisfy the necessary return statement
		return -1;
	}
	
	public void updateLevel(Level lev) {
		this.level = lev;
	}
}
