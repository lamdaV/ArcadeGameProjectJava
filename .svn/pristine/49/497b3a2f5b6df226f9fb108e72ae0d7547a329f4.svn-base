import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import javax.imageio.ImageIO;

public class Level {
	// Texture/Block id implement more later
	private final int DIRT = 0;
	private final int BARRIER = 1;
	private final int CLEAR = 2;
	private final int EMERALD = 3;

	private int mapWidth;
	private int mapHeight;

	private int[][] map;

	private int tileSize;

	/**
	 * TODO Put here a description of what this constructor does.
	 *
	 * @param fileName
	 * @param tileSize
	 */
	public Level(String fileName, int tileSize) {
		this.tileSize = tileSize;

		try {
			String parser = " ";
			String currentLine = null;
			String[] currentLineValues = null;
			FileReader fileInput = new FileReader(fileName);
			BufferedReader imageReader = new BufferedReader(fileInput);

			this.mapWidth = Integer.parseInt(imageReader.readLine());
			this.mapHeight = Integer.parseInt(imageReader.readLine());

			this.map = new int[this.mapHeight][this.mapWidth];

			for (int r = 0; r < this.map.length; r++) {
				// Get line of numbers and spaces.
				currentLine = imageReader.readLine();

				// Eliminates currentLine's space and obtain a array of String
				// integers.
				currentLineValues = currentLine.split(parser);

				for (int c = 0; c < this.map[r].length; c++) {
					// Convert the String integers into integer values to be
					// stored in level.
					this.map[c][r] = Integer.parseInt(currentLineValues[c]);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
	}

	/**
	 * TODO Put here a description of what this method does.
	 *
	 */
	public void update() {
		
	}

	/**
	 * TODO Put here a description of what this method does.
	 *
	 * @param g2
	 */
	public void draw(Graphics2D g2) {
		int currentPosition;

		for (int r = 0; r < this.map.length; r++) {
			for (int c = 0; c < this.map[r].length; c++) {
				currentPosition = this.map[r][c];

				if (currentPosition == this.DIRT) {
					try {
						BufferedImage dirt = ImageIO.read(new File("res/dirt.png"));
						g2.drawImage(dirt, r * this.tileSize, c * this.tileSize, null);
						continue;
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("Error: File not found");
					}
				} else if (currentPosition == this.BARRIER) {
					try {
						BufferedImage barrier = ImageIO.read(new File("res/barrier.png"));
						g2.drawImage(barrier, r * this.tileSize, c * this.tileSize, null);
						continue;
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("Error: File not found");
					}
				} else if (currentPosition == this.CLEAR) {
					g2.setColor(Color.WHITE);
				} else if (currentPosition == this.EMERALD) {
					try {
						BufferedImage emerald = ImageIO.read(new File("res/emeraldOre.png"));
						g2.drawImage(emerald, r * this.tileSize, c * this.tileSize, null);
						continue;
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("Error: File not found");
					}
				}

				g2.fillRect(r * this.tileSize, c * this.tileSize,
						this.tileSize, this.tileSize);
			}
		}
	}
	
	public int[][] getMap() {
		return this.map;
	}
	
	public void updateTile(int x, int y, int tileID) {
		this.map[x][y] = tileID;
	}

	// Old code.
	// /**
	// * TODO Put here a description of what this method does.
	// *
	// */
	// public void populateLevel() {
	// File level = null;
	//
	// if (this.counter == 0) {
	// level = new File("res/Level 1.txt");
	// } else if (this.counter == 1) {
	// level = new File("res/Level 2.txt");
	// } else {
	// level = new File("res/Level 3.txt");
	// }
	//
	// Scanner input = null;
	//
	// try {
	// input = new Scanner(level);
	//
	// for (int r = 0; r < this.WIDTH; r++) {
	// for (int c = 0; c < this.HEIGHT; c++) {
	// if (!input.hasNextInt()) {
	// break;
	// }
	// this.level[r][c] = input.nextInt();
	// }
	// }
	// } catch (FileNotFoundException e) {
	// System.out.println("File " + level.getAbsolutePath()
	// + " could not be found.");
	// } catch (IOException ioe) {
	// ioe.printStackTrace();
	// } finally {
	// input.close();
	// this.counter++;
	// }
	// // System.out.println(Arrays.deepToString(this.level));
	// }

	// @Override
	// protected void paintComponent(Graphics g) {
	// Graphics2D g2 = (Graphics2D) g;
	//
	// for (int r = 0; r < this.level.length; r++) {
	// for (int c = 0; c < this.level[r].length; c++) {
	// if (this.level[r][c] == this.DIRT) {
	// g2.setColor(Color.GREEN);
	// } else if (this.level[r][c] == this.BARRIER) {
	// g2.setColor(Color.BLUE);
	// } else if (this.level[r][c] == this.CLEAR) {
	// g2.setColor(Color.BLACK);
	// }
	// g2.fillRect(r * this.TILE_SIZE, c * this.TILE_SIZE,
	// this.TILE_SIZE, this.TILE_SIZE);
	// g2.drawRect(r * this.TILE_SIZE, c * this.TILE_SIZE,
	// this.TILE_SIZE, this.TILE_SIZE);
	// }
	//
	// }
	// }
}
