package objects;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import toolObjects.Coordinate;
import toolObjects.Node;

/**
 * A Hobbin, an enemy that can dig its own tunnels to the player object.
 * 
 * @author lamd. Created Feb 10, 2015.
 */
public class Hobbin extends Enemy {
	/**
	 * Constructor of a Hobbin
	 * 
	 * @param level
	 *            the level data of the Hobbin.
	 * @param player
	 *            the target player of the Hobbin.
	 */
	public Hobbin(Level level, Digger player) {
		super(level, player);
		try {
			this.sprite = ImageIO.read(new File("res/hobbin.png"));
		} catch (IOException e) {
			System.out.println("Error: File not found.");
			e.printStackTrace();
			System.exit(0);
		}
	}

	/**
	 * Constructs an "evolved" Hobbin (Nobbin -> Hobbin).
	 * 
	 * @param level
	 *            the level data of the Hobbin.
	 * @param player
	 *            the target player of the Hobbin.
	 * @param tileCoordinate
	 *            the Coordinate when it was a Nobbin.
	 */
	public Hobbin(Level level, Digger player, Coordinate tileCoordinate) {
		super(level, player);
		try {
			this.sprite = ImageIO.read(new File("res/hobbin.png"));
		} catch (IOException e) {
			System.out.println("Error: File not found.");
			e.printStackTrace();
			System.exit(0);
		}
		calculateHeuristic();
		this.tilePositionX = tileCoordinate.getX();
		this.tilePositionY = tileCoordinate.getY();
	}

	@Override
	protected void canMoveTo(Node nodeCurrent, int mapPositionID,
			Node nodePosition) {
		final ArrayList<Integer> BARRIERS = this.level.getBarriersIDList();
		final int GOLD = this.level.GOLD;

		if (!BARRIERS.contains(mapPositionID) && mapPositionID != GOLD
				&& !this.close.contains(nodePosition)) {
			if (nodePosition.getNext() == null) {
				nodePosition.setNext(nodeCurrent);
				this.open.add(nodePosition);
			}
		}
	}

	@Override
	public void move() {
		super.move();
	}

	/**
	 * Checks if the Hobbin is colliding with non-barrier blocks. If it can dig
	 * through, the Hobbin will move through.
	 * 
	 * @param map
	 *            the level tileID map.
	 */
	@Override
	public void collideWithOthers(int[][] map) {
		super.collideWithOthers(map);
		final int CLEAR = this.level.CLEAR;
		final int EMERALD = this.level.EMERALD;
		final int DIRT = this.level.DIRT;
		final int TREASURE = this.level.TREASURE;

		ArrayList<Rectangle2D.Double> regularCollisionBoxes = this.level
				.getRegularCollisionBoxes();

		for (int i = 0; i < regularCollisionBoxes.size(); i++) {
			if (this.collisionBox.intersects(regularCollisionBoxes.get(i))) {
				int c = (int) regularCollisionBoxes.get(i).getX() / this.SCALE;
				int r = (int) regularCollisionBoxes.get(i).getY() / this.SCALE;
				if (map[c][r] == DIRT) {
					this.level.updateTile(c, r, CLEAR);
				}
				if (map[c][r] == EMERALD) {
					this.level.updateTile(c, r, CLEAR);
				}
				if (map[c][r] == TREASURE) {
					this.level.updateTile(c, r, CLEAR);
				}
			}
		}
		
		this.level.generateRegularCollisionBoxes();
	}
}
