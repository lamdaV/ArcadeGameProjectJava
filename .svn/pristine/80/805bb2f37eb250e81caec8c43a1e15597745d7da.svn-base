import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

public class Digger {
	// Tile ID
	private final int DIRT = 0;
	private final int BARRIER = 1;
	private final int CLEAR = 2;
	private final int EMERALD = 3;

	// Constants.
	private final int STARTING_X = 3; // The starting tile position.
	private final int STARTING_Y = 3; // The starting tile position.
	private final int SCALE = 32; // The size of a tile in pixels.
	private final int EMERALD_POINT = 100; // Points gained from each emerald.
	private final double MOVE_SPEED = 1; // The move speed in pixels.
	public final int MAX_LIFE = 5; // The max amount of lives a player can
									// gain.

	// Variables
	private double tilePositionX; // Digger's tile position in the X plane.
	private double tilePositionY; // Digger's tile position in the Y plane.
	private BufferedImage sprite; // Digger's player image.
	private Level level; // the current map.
	private int score; // the player's score.
	private int life; // the player's remaining lives.

	private Rectangle2D.Double collisionBox;
	private int delayCounter;
	private boolean isGodModeEnabled;

	// Questionable use
	private String direction;
	private double angularPosition;

	/**
	 * Constructs a Digger object to represent the player.
	 * 
	 * @param level
	 *            the level the player is on.
	 */
	public Digger(Level level) {
		// location on 20 x 20 board.
		this.tilePositionX = this.STARTING_X;
		this.tilePositionY = this.STARTING_Y;

		// Initialize score and level.
		this.score = 0;
		this.level = level;
		
		this.isGodModeEnabled = false;

		this.life = 0;
		this.collisionBox = new Rectangle2D.Double(this.tilePositionX
				* this.SCALE, this.tilePositionY * this.SCALE, this.SCALE,
				this.SCALE);

		// Questionable.
		this.direction = null;
		this.angularPosition = 0;
		this.delayCounter = 0;

		// Assign the player's image.
		try {
			this.sprite = ImageIO.read(new File("res/digger.png"));
		} catch (IOException e) {
			System.out.println("Error: File not found.");
			e.printStackTrace();
			System.exit(0);
		}
	}

	/**
	 * Draws the player on a given Graphics2D object.
	 * 
	 * @param g2
	 *            the the given Graphics2D object.
	 */
	public void draw(Graphics2D g2) {
		g2.translate(this.tilePositionX * this.SCALE, this.tilePositionY
				* this.SCALE);
		g2.rotate(this.angularPosition);

		g2.drawImage(this.sprite, 0, 0, null);

		g2.rotate(-this.angularPosition);
		g2.translate(-this.tilePositionX * this.SCALE, -this.tilePositionY
				* this.SCALE);
	}

	/**
	 * Moves the player object accordingly.
	 * 
	 * @param direction
	 *            a string indicating direction.
	 */
	public void move(String direction) {
		final int THRESHOLD = 2;
		int[][] map = this.level.getMap();
		int roundedPositionX;
		int roundedPositionY;
		int currentPosition;

		double oldX = this.tilePositionX;
		double oldY = this.tilePositionY;
		
		if (this.delayCounter <= THRESHOLD) {
			return;
		}
		this.delayCounter = 0;
		
		if (direction.equals("left")) {
			this.tilePositionX = this.tilePositionX - this.MOVE_SPEED;
		}
		if (direction.equals("right")) {
			this.tilePositionX = this.tilePositionX + this.MOVE_SPEED;
		}
		if (direction.equals("up")) {
			this.tilePositionY = this.tilePositionY - this.MOVE_SPEED;
		}
		if (direction.equals("down")) {
			this.tilePositionY = this.tilePositionY + this.MOVE_SPEED;
		}

		this.collisionBox.setRect(this.tilePositionX * this.SCALE,
				this.tilePositionY * this.SCALE, this.SCALE, this.SCALE);

		roundedPositionX = (int) Math.round(this.tilePositionX);
		roundedPositionY = (int) Math.round(this.tilePositionY);
		currentPosition = map[roundedPositionX][roundedPositionY];

		// TODO: Get this to work.
		// Attempt to re-adjust the player object when switching direction.
		// if (this.direction != null) {
		// if ((this.direction.equals("up") || this.direction.equals("down"))
		// && (direction.equals("left") || direction.equals("right"))) {
		// this.tilePositionY = roundedPositionY;
		// } else {
		// this.tilePositionX = roundedPositionX;
		// }
		// }

		if (currentPosition == this.DIRT) {
			this.level.updateTile(roundedPositionX, roundedPositionY,
					this.CLEAR);
		}
		if (collideWithBarrier()) {
			this.tilePositionX = oldX;
			this.tilePositionY = oldY;
		}

		if (currentPosition == this.EMERALD) {
			this.level.updateTile(roundedPositionX, roundedPositionY,
					this.CLEAR);
			this.score = this.score + this.EMERALD_POINT;
			System.out.println(this.score);
		}

		// this.direction = direction;
	}

	/**
	 * Resets the player's position to its starting point. Mainly used after
	 * levels are completed.
	 * 
	 */
	public void resetPlayerPosition() {
		this.tilePositionX = this.STARTING_X;
		this.tilePositionY = this.STARTING_Y;
	}

	/**
	 * Updates Digger's level field. Mainly used after levels are completed.
	 * 
	 * @param level
	 *            a new level file
	 */
	public void updateLevel(Level level) {
		this.level = level;
	}

	public double getPositionX() {
		return this.tilePositionX;
	}

	public double getPositionY() {
		return this.tilePositionY;
	}

	/**
	 * Returns a boolean value of whether or not the Digger is colliding with the Barriers. 
	 *
	 * @return true if colliding with barrier false if not.
	 */
	public boolean collideWithBarrier() {
		ArrayList<Rectangle2D.Double> barrierCollisonBoxes = this.level
				.getBarrierCollisonBoxes();

		for (int i = 0; i < barrierCollisonBoxes.size(); i++) {
			if (this.collisionBox.intersects(barrierCollisonBoxes.get(i))) {
				return true;
			}
		}

		return false;
	}
	
	/**
	 * Returns the Digger's collisionBox.
	 *
	 * @return the collisionBox.
	 */
	public Rectangle2D.Double getCollisionBox() {
		return this.collisionBox;
	}
	
	/**
	 * Kills the Digger and resets its position.
	 *
	 */
	public void die() {
		if (isGodModeEnabled) {
			return;
		}
		this.life--;
		resetPlayerPosition();
		this.collisionBox.setRect(this.tilePositionX, this.tilePositionY, this.SCALE, this.SCALE);
	}
	
	/**
	 * Returns the life count of the Digger.
	 *
	 * @return the life count.
	 */
	public int getLife() {
		return this.life;
	}
	
	/**
	 * Checks for bonuses to add for the Digger if prerequisites are met.
	 *
	 */
	public void checkScore() {
		if (this.score != 0 && this.score % 5000 == 0 && this.life < this.MAX_LIFE) {
			this.life++;
		}
	}
	
	/**
	 * Returns the score of the Digger.
	 *
	 * @return the score.
	 */
	public int getScore() {
		return this.score;
	}

	/**
	 * Sets the Diggers life count to the specified paramenter.
	 *
	 * @param life the specified life parameter.
	 */
	public void setLife(int life) {
		this.life = life;
	}
	
	/**
	 * Increments the delayCounter that delays the Digger's movement.
	 *
	 */
	public void delayCounter() {
		this.delayCounter++;
	}

	/**
	 * Toggles GodMode. (Makes the player unkillable).
	 *
	 */
	public void toggleGodMode() {
		this.isGodModeEnabled = !this.isGodModeEnabled;
		if (this.isGodModeEnabled) {
			System.out.println("GodMode Enabled.");
		} else {
			System.out.println("GodMode Disabled.");
		}
	}
}

